#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Integration Test2

on:
  push:
    branches:
      - dev-1.4.0-integration-test
  pull_request:
    branches:
      - dev-1.4.0-integration-test

#concurrency:
#  group: test-${{ github.head_ref || github.run_id }}
#  cancel-in-progress: true

env:
  KIND_CONFIG_PATH: './linkis-dist/helm/scripts/resources/kind-cluster.yaml'
  KIND_CLUSTER_NAME: 'test-helm'
jobs:
  integration-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.0.0]
        kubernetes-version:
#          - 'kindest/node:v1.21.10'
          - 'kindest/node:v1.23.4'
    timeout-minutes: 90
    env:
      TAG: ${{ github.sha }}
      SKIP_TEST: true
      HUB: ghcr.io/apache/linkis
      LINKIS_VERSION: 1.4.0-SNAPSHOT
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 8
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

#      - name: Build frontend by node.js
#        run: |
#          cd linkis-web
#          sed -i "/VUE_APP_MN_CONFIG_PREFIX/d" .env
#          npm install
#          npm run build
#
#      - name: Build backend by maven
#        run: |
#          ./mvnw install -Pdocker -Dmaven.javadoc.skip=true -Dmaven.test.skip=true -Dlinkis.build.web=true -Dlinkis.build.with.jdbc=true -Dlinkis.build.ldh=true


      - name: Set up chart-testing
        uses: ./.github/actions/chart-testing-action


      - name: Create Kind cluster
        uses: ./.github/actions/kind-action
        with:
          config: ${{ env.KIND_CONFIG_PATH }}
          node_image: ${{ matrix.kubernetes-version }}
          cluster_name: ${{ env.KIND_CLUSTER_NAME }}
      - name: Start Linkis Service
        run: |
          #先直接下载镜像 后续调整为主动构建
          ROOT_DIR=./linkis-dist/
          MIRRORS="ghcr.io"
          TAG="latest"
          docker pull ${MIRRORS}/apache/linkis/linkis-ldh:${TAG}
          docker pull ghcr.io/apache/linkis/linkis:${TAG}
          docker pull ${MIRRORS}/apache/linkis/linkis-web:${TAG}
          #添加mysql 驱动
          bash -v ${ROOT_DIR}/docker/scripts/make-linkis-image-with-mysql-jdbc.sh
          #重新打tag
          docker tag linkis:with-jdbc linkis:dev
          #docker tag  ${MIRRORS}/apache/linkis/linkis:${TAG} linkis:dev
          docker tag  ${MIRRORS}/apache/linkis/linkis-web:${TAG} linkis-web:dev
          docker tag  ${MIRRORS}/apache/linkis/linkis-ldh:${TAG} linkis-ldh:dev

          #启动容器服务
          bash ./linkis-dist/helm/scripts/install-mysql.sh  true\
              && bash ./linkis-dist/helm/scripts/install-ldh.sh true \
              && bash ./linkis-dist/helm/scripts/install-charts-with-ldh.sh linkis linkis-demo true
          #等待服务启动成功
          n=0
          while (($n<20))
          do
            kubectl get pods -A
            n=$((n+1))
            sleep 10
          done
          #打印日志
          bash ./linkis-dist/helm/scripts/logs-pod.sh cg-linkismanager
          bash ./linkis-dist/helm/scripts/logs-pod.sh cg-engineconnmanager
          #临时使用client lib包 后续主动构建后需要调整
          echo "cp -r linkis-dist/package/lib1 linkis-dist/package/lib"
          cp -r linkis-dist/package/lib1 linkis-dist/package/lib
          # 开启proxy 端口映射
          echo "开启proxy 端口映射"
          bash ./linkis-dist/helm/scripts/remote-proxy.sh start
          # test
          #POD_NAME=`kubectl get pods -n linkis  -l app.kubernetes.io/instance=linkis-demo-mg-gateway -o jsonpath='{.items[0].metadata.name}'`
          #kubectl port-forward -n linkis pod/${POD_NAME} 19002:9001  >/dev/null &
          # 查看proxy 端口映射
          echo "查看proxy 端口映射"
          bash ./linkis-dist/helm/scripts/remote-proxy.sh list
          echo 1 | curl -vvv http://127.0.0.1:8088
          echo 2 | curl -vvv http://127.0.0.1:20303
          # 执行shell测试
          bash ./linkis-dist/package/bin/linkis-cli  --gatewayUrl http://127.0.0.1:19001 -engineType shell-1 -codeType shell -code "echo \"hello\" "
          #执行python测试
          bash ./linkis-dist/package/bin/linkis-cli  --gatewayUrl http://127.0.0.1:19001 -engineType python-python2 -codeType python -code "print(\"hello\")"
        shell: bash
